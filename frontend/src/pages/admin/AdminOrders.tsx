import { useEffect, useState } from 'react';
import AdminHeader from '../../components/AdminHeader';

interface OrderProduct {
  idProducts: number;
  nameProducts: string;
  count: number;
  cost: number;
  photo: string;
  totalPrice: number;
}

interface Order {
  id: number;
  dateCreate: string;
  status: string;
  clientName: string;
  products: OrderProduct[];
  total: number;
}

const statuses = [
  "–û—Ç–∫–∞–∑–∞–Ω–æ",
  "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
  "–í —Ä–∞–±–æ—Ç–µ",
  "–ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é",
  "–í—ã–¥–∞–Ω"
];

const AdminOrders = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const token = localStorage.getItem('token');

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const res = await fetch('http://localhost:4000/admin/orders', {
          headers: { Authorization: `Bearer ${token}` },
        });
        const data = await res.json();

        if (res.ok) {
          setOrders(data);
        } else {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', data.message);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchOrders();
  }, [token]);

  const filteredOrders = orders.filter(order =>
    order.clientName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    order.id.toString().includes(searchTerm)
  );

  const updateStatus = async (orderId: number, newStatus: string) => {
    try {
      const res = await fetch(`http://localhost:4000/admin/orders/${orderId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify({ status: newStatus })
      });

      const data = await res.json();

      if (res.ok) {
        setOrders(prev =>
          prev.map(order =>
            order.id === orderId ? { ...order, status: newStatus } : order
          )
        );
      } else {
        alert(data.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', err);
    }
  };

  if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>;
  if (orders.length === 0) return <p>–ó–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</p>;

  return (
    <>
      <AdminHeader />
      <div style={{ padding: '2rem', maxWidth: '900px', margin: '0 auto' }}>
        <h2>üìã –ó–∞–∫–∞–∑—ã (–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å)</h2>
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          style={{ margin: "1rem 0", padding: "0.5rem", width: "100%" }}
        />

        <ul style={{ listStyle: 'none', padding: 0 }}>
          {filteredOrders.map(order => (
            <li key={order.id} style={{ border: '1px solid #ccc', borderRadius: '8px', marginBottom: '1.5rem', padding: '1rem' }}>
              <h3>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</h3>
              <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {order.clientName}</p>
              <p><strong>–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:</strong> {new Date(order.dateCreate).toLocaleString()}</p>
              <p>
                <strong>–°—Ç–∞—Ç—É—Å: </strong>
                <select
                  value={order.status}
                  onChange={(e) => updateStatus(order.id, e.target.value)}
                >
                  {statuses.map(status => (
                    <option key={status} value={status}>{status}</option>
                  ))}
                </select>
              </p>
              <h4>–¢–æ–≤–∞—Ä—ã:</h4>
              <ul style={{ paddingLeft: '1rem' }}>
                {order.products.map(product => (
                  <li key={product.idProducts} style={{ display: 'flex', alignItems: 'center', marginBottom: '1rem' }}>
                    <img
                      src={product.photo ? `http://localhost:4000/${product.photo}` : "/placeholder.png"}
                      style={{ width: '80px', height: '80px', objectFit: 'cover', marginRight: '1rem' }}
                    />
                    <div>
                      <p><strong>{product.nameProducts}</strong></p>
                      <p>–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {product.cost} ‚ÇΩ</p>
                      <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.count}</p>
                      <p>–°—É–º–º–∞: {product.totalPrice.toFixed(2)} ‚ÇΩ</p>
                    </div>
                  </li>
                ))}
              </ul>
              <p><strong>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.total.toFixed(2)} ‚ÇΩ</strong></p>
            </li>
          ))}
        </ul>
      </div>
    </>
  );
};

export default AdminOrders;
